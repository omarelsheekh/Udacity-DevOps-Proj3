version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      stacks-ID:
        type: string
    steps:
      - run:
          name: Destroy backend
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name backend-stack-<< parameters.stacks-ID >>
      - run:
          name: Destroy frontend
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.stacks-ID >> --recursive
            aws cloudformation delete-stack \
              --stack-name frontend-stack-<< parameters.stacks-ID >>
           
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build front-end
          working_directory: frontend/
          command: |
            npm install
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end build
          working_directory: backend/
          command: |
            npm install
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ["frontend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}"]
      - run:
          name: test front-end
          working_directory: frontend/
          command: |
            npm install oauth-sign
            npm run test
               
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ["backend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}"]
      - run:
          name: Back-end test
          working_directory: backend/
          command: npm run test
        
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ["frontend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}"]
      - run:
          name: scan front-end
          working_directory: frontend/
          command: |
            npm audit fix
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ["backend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}"]
      - run:
          name: Back-end scan
          working_directory: backend/
          command: |
            npm audit fix
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "backend-stack-$CIRCLE_WORKFLOW_ID" \
              --parameter-overrides ID=$CIRCLE_WORKFLOW_ID  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "frontend-stack-$CIRCLE_WORKFLOW_ID" \
              --parameter-overrides ID=$CIRCLE_WORKFLOW_ID
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-$CIRCLE_WORKFLOW_ID" \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --output text >> .circleci/ansible/inventory.txt
      - save_cache:
          paths: [".circleci/ansible/inventory.txt"]
          key: inventory-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - destroy-environment:
          stacks-ID: $CIRCLE_WORKFLOW_ID

  configure-infrastructure-and-deploy-backend:
    docker:
      - image: python
    environment:
      ANSIBLE_HOST_KEY_CHECKING: False
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "8c:12:f9:c8:21:1d:5e:82:5e:bc:ad:bf:2f:3c:98:b1"
      - restore_cache:
          keys: ["inventory-{{ .Environment.CIRCLE_WORKFLOW_ID }}"]
      - run:
          name: install dependancies
          command: pip install ansible awscli
      - run:
          name: Configure server
          working_directory: .circleci/ansible/
          command: |
            ansible-playbook -i inventory.txt deploy-backend.yml 
      - destroy-environment:
          stacks-ID: $CIRCLE_WORKFLOW_ID    

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ["backend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}"]
      - run:
          name: Run migrations
          working_directory: backend/
          command: npm run migrations
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            exit 0
      - run:
          name: revert the migration when it fails
          working_directory: backend/
          when: on_fail
          command: npm run migrations:revert  

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ["frontend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}"]
      - run:
          name: install awscli
          command: |
            sudo apt update
            sudo apt install python3-pip
            pip3 install awscli
      - run:
          name: Get backend url
          command: |
            export API_URL=`aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-$CIRCLE_WORKFLOW_ID" \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --output text` 
            echo "export API_URL=${API_URL}:3030" >> $BASH_ENV
      - run:
          name: Deploy frontend objects
          working_directory: frontend/
          command: |
            echo $API_URL
            npm run build
            export s3Dir=s3://udapeople-${CIRCLE_WORKFLOW_ID}
            for entry in dist/*; do
                name=`echo $entry | sed 's/.*\///'`  # getting the name of the file or directory
                if [[ -d  $entry ]]; then  # if it is a directory
                    aws s3 cp  --recursive "$entry" "$s3Dir/$name/" --acl public-read
                else  # if it is a file
                    aws s3 cp "$entry" "$s3Dir/" --acl public-read
                fi
            done
      - destroy-environment:
          stacks-ID: $CIRCLE_WORKFLOW_ID        
                    
  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: install awscli
          command: |
            sudo apt update
            sudo apt install python3-pip
            pip3 install awscli
      - run:
          name: Get backend url
          command: |
            export API_URL=`aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-$CIRCLE_WORKFLOW_ID" \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --output text` 
            echo "export API_URL=${API_URL}:3030" >> $BASH_ENV
      - run:
          name: Backend smoke test.
          command: |
            echo $API_URL
            if curl -s "${API_URL}/api/status" | grep ok
            then
            exit 0
            else
            exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            export FRONT_URL=http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-us-west-2.amazonaws.com/index.html
            echo $FRONT_URL
            if curl -s ${FRONT_URL} | grep Welcome
            then
            exit 0
            else
            exit 1
            fi
      # - destroy-environment:
      #     stacks-ID: $CIRCLE_WORKFLOW_ID  

  cloudfront-update-and-cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: cloudfront-update-and-cleanup
          command: |
            export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name=='.*WorkflowID.*'].Value" \
                --no-paginate --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            aws cloudformation deploy \
                --template-file .circleci/files/cloudfront.yml \
                --stack-name "cloudfront-stack-$CIRCLE_WORKFLOW_ID" \
                --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}" \
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "backend-stack-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "frontend-stack-${OldWorkflowID}"
            fi
      # Here's where you will add some code to rollback on failure  

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch, main]
      - configure-infrastructure-and-deploy-backend:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure-and-deploy-backend]
      - deploy-frontend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-frontend]
      - cloudfront-update-and-cleanup:
          requires: [smoke-test]